import os
import shutil
import sys

from dotenv import load_dotenv
from openai import OpenAI
from rich.console import Console
from rich.panel import Panel
from rich.syntax import Syntax

from gen_env.env import GenEnv

load_dotenv()


def main():
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("Error: OPENAI_API_KEY environment variable not set.")
        sys.exit(1)

    model_name = os.getenv("OPENAI_MODEL", "gpt-4.1-2025-04-14")

    openai_client = OpenAI(api_key=api_key)
    console = Console()

    # --- Environment Setup ---
    gen_env = GenEnv(model_name=model_name, client=openai_client, max_steps=15)

    # --- Task Setup ---
    agent_workdir = "./test_workspace"
    if os.path.exists(agent_workdir):
        shutil.rmtree(agent_workdir)
    os.makedirs(agent_workdir, exist_ok=True)

    test_project_src = "./examples/fix_tests"
    # The agent will work on a copy inside the temporary workspace
    project_work_path = os.path.join(agent_workdir, "test_project")
    shutil.copytree(test_project_src, project_work_path, ignore=shutil.ignore_patterns('.git'))

    console.print(
        Panel(
            f"Copied test project to {project_work_path}",
            title="Setup",
            border_style="green",
        )
    )

    fix_prompt = """I have a Python project with failing tests. Please investigate, find the bug in the code, and fix it.
You should NOT modify the test files themselves; the tests are correct and the implementation has a bug.
"""

    console.print(
        Panel("Starting Task: Fix failing tests", title="Agent Task", border_style="yellow")
    )

    # --- Run Episode ---
    _steps, final_patch = gen_env.run_episode(
        project_path=project_work_path, prompt=fix_prompt
    )

    # --- Verification ---
    console.print(
        Panel(
            "Episode Finished. Verifying final state...",
            title="Verification",
            border_style="blue",
        )
    )

    if final_patch:
        console.print(
            Panel(final_patch, title="Final Patch Generated", border_style="green")
        )
    else:
        console.print(
            Panel("No patch was generated by the agent.", title="Result", border_style="yellow")
        )

    # Run pytest on the host to verify
    verification_output = os.popen(f"cd {project_work_path} && python -m pytest -v").read()
    console.print(Syntax(verification_output, "python", theme="monokai"))

    if "failed" not in verification_output.lower() and "passed" in verification_output.lower():
        console.print(
            Panel(
                "All tests are now passing! The agent successfully fixed the code.",
                title="Success",
                border_style="green",
            )
        )
    else:
        console.print(
            Panel(
                "Some tests are still failing.", title="Failure", border_style="red"
            )
        )


if __name__ == "__main__":
    main()